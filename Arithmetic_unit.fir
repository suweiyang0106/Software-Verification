FIRRTL version 1.1.0
circuit Arithmetic_unit :
  module Arithmetic_unit :
    input clock : Clock
    input reset : UInt<1>

    reg cntReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[cmd135.sc 5:23]
    wire addr : UInt<1>[3] @[cmd135.sc 14:21]
    addr[0] <= UInt<1>("h1") @[cmd135.sc 14:21]
    addr[1] <= UInt<1>("h1") @[cmd135.sc 14:21]
    addr[2] <= UInt<1>("h1") @[cmd135.sc 14:21]
    node hi = cat(addr[2], addr[1]) @[cmd135.sc 15:27]
    node addr_content = cat(hi, addr[0]) @[cmd135.sc 15:27]
    wire acc : UInt<1>[1] @[cmd135.sc 19:20]
    acc[0] <= UInt<1>("h1") @[cmd135.sc 19:20]
    node _T = bits(reset, 0, 0) @[cmd135.sc 21:9]
    node _T_1 = eq(_T, UInt<1>("h0")) @[cmd135.sc 21:9]
    when _T_1 : @[cmd135.sc 21:9]
      printf(clock, UInt<1>("h1"), "acc_content input = %d", acc[0]) : printf @[cmd135.sc 21:9]
    wire data : UInt<1>[1] @[cmd135.sc 26:21]
    data[0] <= UInt<1>("h0") @[cmd135.sc 26:21]
    node _T_2 = bits(reset, 0, 0) @[cmd135.sc 28:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[cmd135.sc 28:9]
    when _T_3 : @[cmd135.sc 28:9]
      printf(clock, UInt<1>("h1"), "1. data_value input = %d", UInt<1>("h0")) : printf_1 @[cmd135.sc 28:9]
    node _T_4 = eq(cntReg, UInt<1>("h1")) @[cmd135.sc 32:15]
    when _T_4 : @[cmd135.sc 33:3]
      node _T_5 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 35:25]
      node _T_6 = eq(addr_content, UInt<1>("h0")) @[cmd135.sc 35:51]
      node _T_7 = and(_T_5, _T_6) @[cmd135.sc 35:35]
      when _T_7 : @[cmd135.sc 36:7]
        node _T_8 = bits(reset, 0, 0) @[cmd135.sc 38:17]
        node _T_9 = eq(_T_8, UInt<1>("h0")) @[cmd135.sc 38:17]
        when _T_9 : @[cmd135.sc 38:17]
          printf(clock, UInt<1>("h1"), "addr 0x00 acc_value_output = %d", data[0]) : printf_2 @[cmd135.sc 38:17]
        node _T_10 = eq(data[0], data[0]) @[cmd135.sc 39:35]
        node _T_11 = bits(reset, 0, 0) @[cmd135.sc 39:17]
        node _T_12 = eq(_T_11, UInt<1>("h0")) @[cmd135.sc 39:17]
        when _T_12 : @[cmd135.sc 39:17]
          node _T_13 = eq(_T_10, UInt<1>("h0")) @[cmd135.sc 39:17]
          when _T_13 : @[cmd135.sc 39:17]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:39 assert(acc_value_output === data_content)\n") : printf_3 @[cmd135.sc 39:17]
          assert(clock, _T_10, UInt<1>("h1"), "") : assert @[cmd135.sc 39:17]
      else :
        node _T_14 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 41:32]
        node _T_15 = eq(addr_content, UInt<1>("h1")) @[cmd135.sc 41:58]
        node _T_16 = and(_T_14, _T_15) @[cmd135.sc 41:42]
        when _T_16 : @[cmd135.sc 42:7]
          node _T_17 = or(acc[0], data[0]) @[cmd135.sc 43:46]
          node _T_18 = bits(reset, 0, 0) @[cmd135.sc 44:17]
          node _T_19 = eq(_T_18, UInt<1>("h0")) @[cmd135.sc 44:17]
          when _T_19 : @[cmd135.sc 44:17]
            printf(clock, UInt<1>("h1"), "addr 0x01  acc_value_output = %d", _T_17) : printf_4 @[cmd135.sc 44:17]
          node _T_20 = eq(_T_17, UInt<1>("h1")) @[cmd135.sc 45:35]
          node _T_21 = bits(reset, 0, 0) @[cmd135.sc 45:17]
          node _T_22 = eq(_T_21, UInt<1>("h0")) @[cmd135.sc 45:17]
          when _T_22 : @[cmd135.sc 45:17]
            node _T_23 = eq(_T_20, UInt<1>("h0")) @[cmd135.sc 45:17]
            when _T_23 : @[cmd135.sc 45:17]
              printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:45 assert(acc_value_output === 0x1.U)\n") : printf_5 @[cmd135.sc 45:17]
            assert(clock, _T_20, UInt<1>("h1"), "") : assert_1 @[cmd135.sc 45:17]
        else :
          node _T_24 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 47:32]
          node _T_25 = eq(addr_content, UInt<2>("h2")) @[cmd135.sc 47:58]
          node _T_26 = and(_T_24, _T_25) @[cmd135.sc 47:42]
          when _T_26 : @[cmd135.sc 48:7]
            node _T_27 = or(data[0], acc[0]) @[cmd135.sc 49:47]
            node _T_28 = bits(reset, 0, 0) @[cmd135.sc 50:17]
            node _T_29 = eq(_T_28, UInt<1>("h0")) @[cmd135.sc 50:17]
            when _T_29 : @[cmd135.sc 50:17]
              printf(clock, UInt<1>("h1"), "addr 0x02  acc_value_output = %d", _T_27) : printf_6 @[cmd135.sc 50:17]
            node _T_30 = eq(_T_27, UInt<1>("h1")) @[cmd135.sc 51:35]
            node _T_31 = bits(reset, 0, 0) @[cmd135.sc 51:17]
            node _T_32 = eq(_T_31, UInt<1>("h0")) @[cmd135.sc 51:17]
            when _T_32 : @[cmd135.sc 51:17]
              node _T_33 = eq(_T_30, UInt<1>("h0")) @[cmd135.sc 51:17]
              when _T_33 : @[cmd135.sc 51:17]
                printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:51 assert(acc_value_output === 0x1.U)\n") : printf_7 @[cmd135.sc 51:17]
              assert(clock, _T_30, UInt<1>("h1"), "") : assert_2 @[cmd135.sc 51:17]
          else :
            node _T_34 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 53:32]
            node _T_35 = eq(addr_content, UInt<2>("h3")) @[cmd135.sc 53:58]
            node _T_36 = and(_T_34, _T_35) @[cmd135.sc 53:42]
            when _T_36 : @[cmd135.sc 54:7]
              node _T_37 = xor(data[0], acc[0]) @[cmd135.sc 55:47]
              node _T_38 = bits(reset, 0, 0) @[cmd135.sc 56:17]
              node _T_39 = eq(_T_38, UInt<1>("h0")) @[cmd135.sc 56:17]
              when _T_39 : @[cmd135.sc 56:17]
                printf(clock, UInt<1>("h1"), "addr 0x03  acc_value_output = %d", _T_37) : printf_8 @[cmd135.sc 56:17]
              node _T_40 = eq(_T_37, UInt<1>("h1")) @[cmd135.sc 57:35]
              node _T_41 = bits(reset, 0, 0) @[cmd135.sc 57:17]
              node _T_42 = eq(_T_41, UInt<1>("h0")) @[cmd135.sc 57:17]
              when _T_42 : @[cmd135.sc 57:17]
                node _T_43 = eq(_T_40, UInt<1>("h0")) @[cmd135.sc 57:17]
                when _T_43 : @[cmd135.sc 57:17]
                  printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:57 assert(acc_value_output === 0x1.U)\n") : printf_9 @[cmd135.sc 57:17]
                assert(clock, _T_40, UInt<1>("h1"), "") : assert_3 @[cmd135.sc 57:17]
            else :
              node _T_44 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 59:32]
              node _T_45 = eq(addr_content, UInt<3>("h4")) @[cmd135.sc 59:58]
              node _T_46 = and(_T_44, _T_45) @[cmd135.sc 59:42]
              when _T_46 : @[cmd135.sc 60:7]
                node _T_47 = xor(data[0], acc[0]) @[cmd135.sc 61:47]
                node _T_48 = bits(reset, 0, 0) @[cmd135.sc 62:17]
                node _T_49 = eq(_T_48, UInt<1>("h0")) @[cmd135.sc 62:17]
                when _T_49 : @[cmd135.sc 62:17]
                  printf(clock, UInt<1>("h1"), "addr 0x04  acc_value_output = %d", _T_47) : printf_10 @[cmd135.sc 62:17]
                node _T_50 = eq(_T_47, UInt<1>("h1")) @[cmd135.sc 63:35]
                node _T_51 = bits(reset, 0, 0) @[cmd135.sc 63:17]
                node _T_52 = eq(_T_51, UInt<1>("h0")) @[cmd135.sc 63:17]
                when _T_52 : @[cmd135.sc 63:17]
                  node _T_53 = eq(_T_50, UInt<1>("h0")) @[cmd135.sc 63:17]
                  when _T_53 : @[cmd135.sc 63:17]
                    printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:63 assert(acc_value_output === 0x1.U)\n") : printf_11 @[cmd135.sc 63:17]
                  assert(clock, _T_50, UInt<1>("h1"), "") : assert_4 @[cmd135.sc 63:17]
              else :
                node _T_54 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 65:32]
                node _T_55 = eq(addr_content, UInt<3>("h5")) @[cmd135.sc 65:58]
                node _T_56 = and(_T_54, _T_55) @[cmd135.sc 65:42]
                when _T_56 : @[cmd135.sc 66:7]
                  node _T_57 = and(data[0], acc[0]) @[cmd135.sc 67:47]
                  node _T_58 = bits(reset, 0, 0) @[cmd135.sc 68:17]
                  node _T_59 = eq(_T_58, UInt<1>("h0")) @[cmd135.sc 68:17]
                  when _T_59 : @[cmd135.sc 68:17]
                    printf(clock, UInt<1>("h1"), "addr 0x05  acc_value_output = %d", _T_57) : printf_12 @[cmd135.sc 68:17]
                  node _T_60 = eq(_T_57, UInt<1>("h1")) @[cmd135.sc 69:35]
                  node _T_61 = bits(reset, 0, 0) @[cmd135.sc 69:17]
                  node _T_62 = eq(_T_61, UInt<1>("h0")) @[cmd135.sc 69:17]
                  when _T_62 : @[cmd135.sc 69:17]
                    node _T_63 = eq(_T_60, UInt<1>("h0")) @[cmd135.sc 69:17]
                    when _T_63 : @[cmd135.sc 69:17]
                      printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:69 assert(acc_value_output === 0x1.U)\n") : printf_13 @[cmd135.sc 69:17]
                    assert(clock, _T_60, UInt<1>("h1"), "") : assert_5 @[cmd135.sc 69:17]
                else :
                  node _T_64 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 71:32]
                  node _T_65 = eq(addr_content, UInt<3>("h6")) @[cmd135.sc 71:58]
                  node _T_66 = and(_T_64, _T_65) @[cmd135.sc 71:42]
                  when _T_66 : @[cmd135.sc 72:7]
                    node _T_67 = or(data[0], acc[0]) @[cmd135.sc 73:47]
                    node _T_68 = bits(reset, 0, 0) @[cmd135.sc 74:17]
                    node _T_69 = eq(_T_68, UInt<1>("h0")) @[cmd135.sc 74:17]
                    when _T_69 : @[cmd135.sc 74:17]
                      printf(clock, UInt<1>("h1"), "addr 0x06  acc_value_output = %d", _T_67) : printf_14 @[cmd135.sc 74:17]
                    node _T_70 = eq(_T_67, UInt<1>("h1")) @[cmd135.sc 75:35]
                    node _T_71 = bits(reset, 0, 0) @[cmd135.sc 75:17]
                    node _T_72 = eq(_T_71, UInt<1>("h0")) @[cmd135.sc 75:17]
                    when _T_72 : @[cmd135.sc 75:17]
                      node _T_73 = eq(_T_70, UInt<1>("h0")) @[cmd135.sc 75:17]
                      when _T_73 : @[cmd135.sc 75:17]
                        printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:75 assert(acc_value_output === 0x1.U)\n") : printf_15 @[cmd135.sc 75:17]
                      assert(clock, _T_70, UInt<1>("h1"), "") : assert_6 @[cmd135.sc 75:17]
                  else :
                    node _T_74 = eq(UInt<1>("h0"), UInt<1>("h1")) @[cmd135.sc 77:32]
                    node _T_75 = eq(addr_content, UInt<3>("h7")) @[cmd135.sc 77:58]
                    node _T_76 = and(_T_74, _T_75) @[cmd135.sc 77:42]
                    when _T_76 : @[cmd135.sc 78:7]
                      node _T_77 = shr(data[0], 1) @[cmd135.sc 79:47]
                      node _T_78 = bits(reset, 0, 0) @[cmd135.sc 80:17]
                      node _T_79 = eq(_T_78, UInt<1>("h0")) @[cmd135.sc 80:17]
                      when _T_79 : @[cmd135.sc 80:17]
                        printf(clock, UInt<1>("h1"), "addr 0x07  acc_value_output = %d", _T_77) : printf_16 @[cmd135.sc 80:17]
                      node _T_80 = eq(_T_77, UInt<1>("h0")) @[cmd135.sc 81:35]
                      node _T_81 = bits(reset, 0, 0) @[cmd135.sc 81:17]
                      node _T_82 = eq(_T_81, UInt<1>("h0")) @[cmd135.sc 81:17]
                      when _T_82 : @[cmd135.sc 81:17]
                        node _T_83 = eq(_T_80, UInt<1>("h0")) @[cmd135.sc 81:17]
                        when _T_83 : @[cmd135.sc 81:17]
                          printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:81 assert(acc_value_output === 0x0.U)\n") : printf_17 @[cmd135.sc 81:17]
                        assert(clock, _T_80, UInt<1>("h1"), "") : assert_7 @[cmd135.sc 81:17]
      node _T_84 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 85:24]
      node _T_85 = eq(addr_content, UInt<1>("h0")) @[cmd135.sc 85:50]
      node _T_86 = and(_T_84, _T_85) @[cmd135.sc 85:34]
      when _T_86 : @[cmd135.sc 86:7]
        node _T_87 = bits(reset, 0, 0) @[cmd135.sc 88:17]
        node _T_88 = eq(_T_87, UInt<1>("h0")) @[cmd135.sc 88:17]
        when _T_88 : @[cmd135.sc 88:17]
          printf(clock, UInt<1>("h1"), "addr 0x00 data_value_output = %d", acc[0]) : printf_18 @[cmd135.sc 88:17]
        node _T_89 = eq(acc[0], acc[0]) @[cmd135.sc 89:36]
        node _T_90 = bits(reset, 0, 0) @[cmd135.sc 89:17]
        node _T_91 = eq(_T_90, UInt<1>("h0")) @[cmd135.sc 89:17]
        when _T_91 : @[cmd135.sc 89:17]
          node _T_92 = eq(_T_89, UInt<1>("h0")) @[cmd135.sc 89:17]
          when _T_92 : @[cmd135.sc 89:17]
            printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:89 assert(data_value_output === acc_content)\n") : printf_19 @[cmd135.sc 89:17]
          assert(clock, _T_89, UInt<1>("h1"), "") : assert_8 @[cmd135.sc 89:17]
      else :
        node _T_93 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 91:31]
        node _T_94 = eq(addr_content, UInt<1>("h1")) @[cmd135.sc 91:57]
        node _T_95 = and(_T_93, _T_94) @[cmd135.sc 91:41]
        when _T_95 : @[cmd135.sc 92:7]
          node _T_96 = bits(reset, 0, 0) @[cmd135.sc 94:17]
          node _T_97 = eq(_T_96, UInt<1>("h0")) @[cmd135.sc 94:17]
          when _T_97 : @[cmd135.sc 94:17]
            printf(clock, UInt<1>("h1"), "addr 0x01  data_value_output = %d", UInt<1>("h0")) : printf_20 @[cmd135.sc 94:17]
          node _T_98 = eq(UInt<1>("h0"), UInt<1>("h0")) @[cmd135.sc 95:36]
          node _T_99 = bits(reset, 0, 0) @[cmd135.sc 95:17]
          node _T_100 = eq(_T_99, UInt<1>("h0")) @[cmd135.sc 95:17]
          when _T_100 : @[cmd135.sc 95:17]
            node _T_101 = eq(_T_98, UInt<1>("h0")) @[cmd135.sc 95:17]
            when _T_101 : @[cmd135.sc 95:17]
              printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:95 assert(data_value_output === 0x0.U)\n") : printf_21 @[cmd135.sc 95:17]
            assert(clock, _T_98, UInt<1>("h1"), "") : assert_9 @[cmd135.sc 95:17]
        else :
          node _T_102 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 97:31]
          node _T_103 = eq(addr_content, UInt<2>("h2")) @[cmd135.sc 97:57]
          node _T_104 = and(_T_102, _T_103) @[cmd135.sc 97:41]
          when _T_104 : @[cmd135.sc 98:7]
            node _T_105 = bits(reset, 0, 0) @[cmd135.sc 100:17]
            node _T_106 = eq(_T_105, UInt<1>("h0")) @[cmd135.sc 100:17]
            when _T_106 : @[cmd135.sc 100:17]
              printf(clock, UInt<1>("h1"), "addr 0x02  data_value_output = %d", UInt<1>("h0")) : printf_22 @[cmd135.sc 100:17]
            node _T_107 = eq(UInt<1>("h0"), UInt<1>("h0")) @[cmd135.sc 101:36]
            node _T_108 = bits(reset, 0, 0) @[cmd135.sc 101:17]
            node _T_109 = eq(_T_108, UInt<1>("h0")) @[cmd135.sc 101:17]
            when _T_109 : @[cmd135.sc 101:17]
              node _T_110 = eq(_T_107, UInt<1>("h0")) @[cmd135.sc 101:17]
              when _T_110 : @[cmd135.sc 101:17]
                printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:101 assert(data_value_output === 0x0.U)\n") : printf_23 @[cmd135.sc 101:17]
              assert(clock, _T_107, UInt<1>("h1"), "") : assert_10 @[cmd135.sc 101:17]
          else :
            node _T_111 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 103:31]
            node _T_112 = eq(addr_content, UInt<2>("h3")) @[cmd135.sc 103:57]
            node _T_113 = and(_T_111, _T_112) @[cmd135.sc 103:41]
            when _T_113 : @[cmd135.sc 104:7]
              node _T_114 = bits(reset, 0, 0) @[cmd135.sc 106:17]
              node _T_115 = eq(_T_114, UInt<1>("h0")) @[cmd135.sc 106:17]
              when _T_115 : @[cmd135.sc 106:17]
                printf(clock, UInt<1>("h1"), "addr 0x03  data_value_output = %d", UInt<1>("h0")) : printf_24 @[cmd135.sc 106:17]
              node _T_116 = eq(UInt<1>("h0"), UInt<1>("h0")) @[cmd135.sc 107:36]
              node _T_117 = bits(reset, 0, 0) @[cmd135.sc 107:17]
              node _T_118 = eq(_T_117, UInt<1>("h0")) @[cmd135.sc 107:17]
              when _T_118 : @[cmd135.sc 107:17]
                node _T_119 = eq(_T_116, UInt<1>("h0")) @[cmd135.sc 107:17]
                when _T_119 : @[cmd135.sc 107:17]
                  printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:107 assert(data_value_output === 0x0.U)\n") : printf_25 @[cmd135.sc 107:17]
                assert(clock, _T_116, UInt<1>("h1"), "") : assert_11 @[cmd135.sc 107:17]
            else :
              node _T_120 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 109:31]
              node _T_121 = eq(addr_content, UInt<3>("h4")) @[cmd135.sc 109:57]
              node _T_122 = and(_T_120, _T_121) @[cmd135.sc 109:41]
              when _T_122 : @[cmd135.sc 110:7]
                node _T_123 = bits(reset, 0, 0) @[cmd135.sc 112:17]
                node _T_124 = eq(_T_123, UInt<1>("h0")) @[cmd135.sc 112:17]
                when _T_124 : @[cmd135.sc 112:17]
                  printf(clock, UInt<1>("h1"), "addr 0x04  data_value_output = %d", UInt<1>("h0")) : printf_26 @[cmd135.sc 112:17]
                node _T_125 = eq(UInt<1>("h0"), UInt<1>("h0")) @[cmd135.sc 113:36]
                node _T_126 = bits(reset, 0, 0) @[cmd135.sc 113:17]
                node _T_127 = eq(_T_126, UInt<1>("h0")) @[cmd135.sc 113:17]
                when _T_127 : @[cmd135.sc 113:17]
                  node _T_128 = eq(_T_125, UInt<1>("h0")) @[cmd135.sc 113:17]
                  when _T_128 : @[cmd135.sc 113:17]
                    printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:113 assert(data_value_output === 0x0.U)\n") : printf_27 @[cmd135.sc 113:17]
                  assert(clock, _T_125, UInt<1>("h1"), "") : assert_12 @[cmd135.sc 113:17]
              else :
                node _T_129 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 115:31]
                node _T_130 = eq(addr_content, UInt<3>("h5")) @[cmd135.sc 115:57]
                node _T_131 = and(_T_129, _T_130) @[cmd135.sc 115:41]
                when _T_131 : @[cmd135.sc 116:7]
                  node _T_132 = dshl(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 117:41]
                  node _T_133 = bits(reset, 0, 0) @[cmd135.sc 118:17]
                  node _T_134 = eq(_T_133, UInt<1>("h0")) @[cmd135.sc 118:17]
                  when _T_134 : @[cmd135.sc 118:17]
                    printf(clock, UInt<1>("h1"), "addr 0x05  data_value_output = %d", _T_132) : printf_28 @[cmd135.sc 118:17]
                  node _T_135 = eq(_T_132, UInt<2>("h2")) @[cmd135.sc 119:36]
                  node _T_136 = bits(reset, 0, 0) @[cmd135.sc 119:17]
                  node _T_137 = eq(_T_136, UInt<1>("h0")) @[cmd135.sc 119:17]
                  when _T_137 : @[cmd135.sc 119:17]
                    node _T_138 = eq(_T_135, UInt<1>("h0")) @[cmd135.sc 119:17]
                    when _T_138 : @[cmd135.sc 119:17]
                      printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:119 assert(data_value_output === 0x2.U)\n") : printf_29 @[cmd135.sc 119:17]
                    assert(clock, _T_135, UInt<1>("h1"), "") : assert_13 @[cmd135.sc 119:17]
                else :
                  node _T_139 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 121:31]
                  node _T_140 = eq(addr_content, UInt<3>("h6")) @[cmd135.sc 121:57]
                  node _T_141 = and(_T_139, _T_140) @[cmd135.sc 121:41]
                  when _T_141 : @[cmd135.sc 122:7]
                    node _T_142 = dshl(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 123:41]
                    node _T_143 = bits(reset, 0, 0) @[cmd135.sc 124:17]
                    node _T_144 = eq(_T_143, UInt<1>("h0")) @[cmd135.sc 124:17]
                    when _T_144 : @[cmd135.sc 124:17]
                      printf(clock, UInt<1>("h1"), "addr 0x06  data_value_output = %d", _T_142) : printf_30 @[cmd135.sc 124:17]
                    node _T_145 = eq(_T_142, UInt<2>("h2")) @[cmd135.sc 125:36]
                    node _T_146 = bits(reset, 0, 0) @[cmd135.sc 125:17]
                    node _T_147 = eq(_T_146, UInt<1>("h0")) @[cmd135.sc 125:17]
                    when _T_147 : @[cmd135.sc 125:17]
                      node _T_148 = eq(_T_145, UInt<1>("h0")) @[cmd135.sc 125:17]
                      when _T_148 : @[cmd135.sc 125:17]
                        printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:125 assert(data_value_output === 0x2.U)\n") : printf_31 @[cmd135.sc 125:17]
                      assert(clock, _T_145, UInt<1>("h1"), "") : assert_14 @[cmd135.sc 125:17]
                  else :
                    node _T_149 = eq(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 127:31]
                    node _T_150 = eq(addr_content, UInt<3>("h7")) @[cmd135.sc 127:57]
                    node _T_151 = and(_T_149, _T_150) @[cmd135.sc 127:41]
                    when _T_151 : @[cmd135.sc 128:7]
                      node _T_152 = xor(UInt<1>("h1"), UInt<1>("h1")) @[cmd135.sc 129:41]
                      node _T_153 = bits(reset, 0, 0) @[cmd135.sc 130:17]
                      node _T_154 = eq(_T_153, UInt<1>("h0")) @[cmd135.sc 130:17]
                      when _T_154 : @[cmd135.sc 130:17]
                        printf(clock, UInt<1>("h1"), "addr 0x07  data_value_output = %d", _T_152) : printf_32 @[cmd135.sc 130:17]
                      node _T_155 = eq(_T_152, UInt<1>("h0")) @[cmd135.sc 131:36]
                      node _T_156 = bits(reset, 0, 0) @[cmd135.sc 131:17]
                      node _T_157 = eq(_T_156, UInt<1>("h0")) @[cmd135.sc 131:17]
                      when _T_157 : @[cmd135.sc 131:17]
                        node _T_158 = eq(_T_155, UInt<1>("h0")) @[cmd135.sc 131:17]
                        when _T_158 : @[cmd135.sc 131:17]
                          printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:131 assert(data_value_output === 0x0.U)\n") : printf_33 @[cmd135.sc 131:17]
                        assert(clock, _T_155, UInt<1>("h1"), "") : assert_15 @[cmd135.sc 131:17]
    node _T_159 = add(cntReg, UInt<1>("h1")) @[cmd135.sc 134:20]
    node _T_160 = tail(_T_159, 1) @[cmd135.sc 134:20]
    cntReg <= _T_160 @[cmd135.sc 134:10]
    node _T_161 = lt(cntReg, UInt<4>("ha")) @[cmd135.sc 135:17]
    node _T_162 = bits(reset, 0, 0) @[cmd135.sc 135:9]
    node _T_163 = eq(_T_162, UInt<1>("h0")) @[cmd135.sc 135:9]
    when _T_163 : @[cmd135.sc 135:9]
      node _T_164 = eq(_T_161, UInt<1>("h0")) @[cmd135.sc 135:9]
      when _T_164 : @[cmd135.sc 135:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at cmd135.sc:135 assert(cntReg < 10.U)\n") : printf_34 @[cmd135.sc 135:9]
      assert(clock, _T_161, UInt<1>("h1"), "") : assert_16 @[cmd135.sc 135:9]


